name: CI - Django + React + Redis + MySQL + Docker Hub

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-test:
    runs-on: ubuntu-latest

    # Variables disponibles pour toutes les étapes
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      DB_NAME: ${{ secrets.MYSQL_DATABASE }}
      DB_USER: ${{ secrets.MYSQL_USER }}
      DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      DB_HOST: 127.0.0.1
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    services:
      mysql:
        image: mysql:8.0
        # ⚠️ Ces variables sont utilisées *dans* le conteneur MySQL
        env:
          MYSQL_ROOT_PASSWORD: faly09+/+
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -pfaly09+/+"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 🧩 Checkout du code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🐍 Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Installer dépendances backend
        working-directory: ./backend
        run: pip install -r requirements.txt

      - name: ⏳ Attente que MySQL démarre
        run: |
          echo "⏳ Vérification du service MySQL..."
          for i in {1..6}; do
            if mysqladmin ping -h 127.0.0.1 -uroot -pfaly09+/+ > /dev/null 2>&1; then
              echo "✅ MySQL est prêt !"
              exit 0
            fi
            echo "MySQL pas encore prêt... tentative $i/6"
            sleep 10
          done
          echo "❌ MySQL n’a pas démarré à temps."
          exit 1

      - name: 🔧 Migrations Django
        working-directory: ./backend
        run: python manage.py migrate

      - name: 🧪 Tests backend (Daphne inclus)
        working-directory: ./backend
        run: |
          daphne -b 0.0.0.0 -p 8000 backend.asgi:application &
          python manage.py test

      - name: 🧰 Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 📦 Installer dépendances frontend
        working-directory: ./frontend
        run: npm install

      - name: 🔍 Build frontend (Vite)
        working-directory: ./frontend
        env:
          VITE_API_URL: http://localhost:8000
          VITE_WS_URL: ws://localhost:8000
        run: npm run build

      - name: 🐳 Connexion à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
 
      - name: 🏗️ Build et push du backend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/freelance-backend:latest ./backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/freelance-backend:latest

      - name: 🏗️ Build et push du frontend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/freelance-frontend:latest ./frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/freelance-frontend:latest

    # -----------------------------
  # Job 2 : Déploiement (CD)
  # -----------------------------
  deploy:
    runs-on: self-hosted      # ton runner local avec Minikube
    needs: build-test          # attendre que CI soit terminé
    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Appliquer Secrets et ConfigMaps
        run: |
          kubectl apply -f k8s/backend-secret.yaml
          kubectl apply -f k8s/backend-configmap.yaml
          kubectl apply -f k8s/frontend-configmap.yaml

      - name: 🚀 Déployer les Deployments
        run: |
          kubectl apply -f k8s/mysql-deployment.yaml
          kubectl apply -f k8s/mysql-service.yaml

          kubectl apply -f k8s/redis-deployment.yaml
          kubectl apply -f k8s/redis-service.yaml

          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/backend-service.yaml

          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/frontend-service.yaml

          kubectl apply -f k8s/ingress.yaml

      - name: 🔄 Redéployer pods avec les nouvelles images
        run: |
          kubectl rollout restart deployment django-backend
          kubectl rollout restart deployment react-frontend
